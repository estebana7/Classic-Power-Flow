# -*- coding: utf-8 -*-
"""Trabalho 1 - Análise de Redes I - Esteban Aguilar

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11h7wcGAoHDae0L9l1WYC78IFN2M3HOhx

# Trabalho 1

Desenvolver um programa em MatLab ou Python para determinar a matriz de admitância nodal ($Y_{\text{barra}}$) do sistema de 24-barras, cujos dados elétricos estão fornecidos em anexo no formato do programa Anarede.
"""

#=================================================== TRABALHO 1 ===================================================
#Trimestre: 2023.1
#Disciplina: 210001 - Análise de Redes I
#Docente: João Alberto Passos Filho
#Discente: Esteban Vicente Aguilar Bojorge
#Enunciado: Desenvolver um programa em MatLab ou Python para determinar a matriz de admitância nodal (Y_barra) do
#           sistema de 24-barras, cujos dados elétricos estão fornecidos em anexo no formato do programa Anarede.
#==================================================================================================================

import numpy as np

#%%Dados adaptados do arquivo do editCEPEL 'IEEE 24 Barras.pwf'

#DBAR
#         0      1     2      3       4      5     6    7      8    9      10    11     12
#       (Num)   (V)   (A)   (Pg)    (Qg)   (Qn)  (Qm) (Bc)   (Pl) (Ql)    (Sh)  Are   (Vf)
D_BAR = [[ 1, 1035, -22.,  172.,  24.81,  -50.,  80.,   0,  108., 22.,      0,  1,   1000],
         [ 2, 1035, -22.,  172.,   17.1,  -50.,  80.,   0,   97., 20.,      0,  1,   1000],
         [ 3, 1000, -20.,     0,      0,     0,    0,   0,  180., 37.,      0,  1,   1000],
         [ 4,  998, -24.,     0,      0,     0,    0,   0,   74., 15.,      0,  1,   1000],
         [ 5, 1017, -24.,     0,      0,     0,    0,   0,   71., 14.,      0,  1,   1000],
         [ 6, 1010, -27.,     0,      0,     0,    0,   0,  136., 28.,  -100.,  1,   1000],
         [ 7, 1025, -21.,  240.,  53.09,    0., 180.,   0,  125., 25.,      0,  1,   1000],
         [ 8,  992, -25.,     0,      0,     0,    0,   0,  171., 35.,      0,  1,   1000],
         [ 9, 1000, -22.,     0,      0,     0,    0,   0,  175., 36.,      0,  1,   1000],
         [10, 1000, -24.,     0,      0,     0,    0,   0,  195., 40.,      0,  1,   1000],
         [11,  990, -16.,     0,      0,     0,    0,   0,     0,   0,      0,  1,   1000],
         [12, 1003, -15.,     0,      0,     0,    0,   0,     0,   0,      0,  1,   1000],
         [13, 1020, -13., 285.3,  117.5,    0., 240.,   0,  265., 54.,      0,  2,   1000],
         [14,  980, -13.,    0.,  -36.5,  -50., 200.,   0,  194., 39.,      0,  2,   1000],
         [15, 1014, -4.8,  215.,  -23.6,  -50., 110.,   0,  317., 64.,      0,  2,   1000],
         [16, 1017, -5.5,  155.,  32.79,  -50.,  80.,   0,  100., 20.,      0,  2,   1000],
         [17, 1039, -1.6,     0,      0,     0,    0,   0,     0,   0,      0,  2,   1000],
         [18, 1050, -.56,  400.,  134.4,  -50., 200.,   0,  333., 68.,      0,  2,   1000],
         [19, 1023, -6.4,     0,      0,     0,    0,   0,  181., 37.,      0,  2,   1000],
         [20, 1038, -5.3,     0,      0,     0,    0,   0,  128., 26.,      0,  2,   1000],
         [21, 1050,   0.,  400.,  115.1,  -50., 200.,   0,     0,   0,      0,  2,   1000],
         [22, 1050, 5.87,  300.,  -30.1,  -60.,  96.,   0,     0,   0,      0,  2,   1000],
         [23, 1050,  -4.,  660.,   129.,  125., 310.,   0,     0,   0,      0,  2,   1000],
         [24,  984, -11.,     0,      0,     0,    0,   0,     0,   0,      0,  2,   0000]]

#DLIN
#          0      1     2      3       4      5       6       7       8       9    10      11       12 
#        (De)   (Pa)  NcEP  ( R% )  ( X% )  (Mvar)  (Tap)   (Tmn)   (Tmx)   (Phs) (Cn)    (Ce)   Ns(Cq)
D_LIN = [[ 1,    2,   1,      .26,   1.39,  46.11,      1,     0,     0,      0,  175.,  200.,    175.],
         [ 1,    3,   1,     5.46,  21.12,   5.72,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 1,    5,   1,     2.18,   8.45,   2.29,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 2,    4,   1,     3.28,  12.67,   3.43,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 2,    6,   1,     4.97,   19.2,    5.2,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 3,    9,   1,     3.08,   11.9,   3.22,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 3,   24,   1,      .23,   8.39,      0,  1.015,   .95,   1.1,      0,  400.,  600.,  33400.],
         [ 4,    9,   1,     2.68,  10.37,   2.81,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 5,   10,   1,     2.28,   8.83,   2.39,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 6,   10,   1,     1.39,   6.05,  245.9,      1,     0,     0,      0,  175.,  200.,    175.],
         [ 7,    8,   1,     1.59,   6.14,   1.66,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 8,    9,   1,     4.27,  16.51,   4.47,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 8,   10,   1,     4.27,  16.51,   4.47,      1,     0,     0,      0,  175.,  220.,    175.],
         [ 9,   11,   1,      .23,   8.39,      0,   1.03,   .95,   1.1,      0,  400.,  600.,  33400.],
         [ 9,   12,   1,      .23,   8.39,      0,   1.03,   .95,   1.1,      0,  400.,  600.,  33400.],
         [10,   11,   1,      .23,   8.39,      0,  1.015,   .95,  1.05,      0,  400.,  600.,  33400.],
         [10,   12,   1,      .23,   8.39,      0,  1.015,   .95,  1.05,      0,  400.,  600.,  33400.],
         [11,   13,   1,      .61,   4.76,   9.99,      1,     0,     0,      0,  500.,  625.,    500.],
         [11,   14,   1,      .54,   4.18,   8.79,      1,     0,     0,      0,  500.,  625.,    500.],
         [12,   13,   1,      .61,   4.76,   9.99,      1,     0,     0,      0,  500.,  625.,    500.],
         [12,   23,   1,     1.24,   9.66,   20.3,      1,     0,     0,      0,  500.,  625.,    500.],
         [13,   23,   1,     1.11,   8.65,  18.18,      1,     0,     0,      0,  500.,  625.,    500.],
         [14,   16,   1,       .5,   3.89,   8.18,      1,     0,     0,      0,  500.,  625.,    500.],
         [15,   16,   1,      .22,   1.73,   3.64,      1,     0,     0,      0,  500.,  625.,    500.],
         [15,   21,   1,      .63,    4.9,   10.3,      1,     0,     0,      0,  500.,  625.,    500.],
         [15,   21,   2,      .63,    4.9,   10.3,      1,     0,     0,      0,  500.,  625.,    500.],
         [15,   24,   1,      .67,   5.19,  10.91,      1,     0,     0,      0,  500.,  625.,    500.],
         [16,   17,   1,      .33,   2.59,   5.45,      1,     0,     0,      0,  500.,  625.,    500.],
         [16,   19,   1,       .3,   2.31,   4.85,      1,     0,     0,      0,  500.,  625.,    500.],
         [17,   18,   1,      .18,   1.44,   3.03,      1,     0,     0,      0,  500.,  625.,    500.],
         [17,   22,   1,     1.35,  10.53,  22.12,      1,     0,     0,      0,  500.,  625.,    500.],
         [18,   21,   1,      .33,   2.59,   5.45,      1,     0,     0,      0,  500.,  625.,    500.],
         [18,   21,   2,      .33,   2.59,   5.45,      1,     0,     0,      0,  500.,  625.,    500.],
         [19,   20,   1,      .51,   3.96,   8.33,      1,     0,     0,      0,  500.,  625.,    500.],
         [19,   20,   2,      .51,   3.96,   8.33,      1,     0,     0,      0,  500.,  625.,    500.],
         [20,   23,   1,      .28,   2.16,   4.55,      1,     0,     0,      0,  500.,  625.,    500.],
         [20,   23,   2,      .28,   2.16,   4.55,      1,     0,     0,      0,  500.,  625.,    500.],
         [21,   22,   1,      .87,   6.78,  14.24,      1,     0,     0,      0,  500.,  625.,    500.]]

#%% Criação das listas a serem utilizadas no problema

nb = len(D_BAR) #número de barras
nl = len(D_LIN) #número de ramos

B_de = [] #identificar DE onde barra vem
B_para = [] #identificar PARA onde barra vai

r = [] #lista para os valores das resistência
x = [] #lista para os valores das reatâncias
z = [] #lista para os valores de impedância - z = r + jx
ysh_lin = [] #lista para os valores das admitâncias shunt
ysh_bar = [] #lista para os valores das admitâncias devido à compensação de reativo
a = [] #lista para os valores de tap dos transformadores

#%% Formação das variáveis a partir das listas

for i in range(nb):
  ysh_bar.append(complex(0, (1/100) * D_BAR[i][10])) #pega o valor da coluna 9 (Ql) para cada linha i e forma valores de admitância shunt devido à compensação de reativo

for i in range(nl):
  B_de.append(D_LIN[i][0]) #pega o valor da coluna 0 (DE) para cada linha i da matriz D_LIN
  B_para.append(D_LIN[i][1]) #pega o valor da coluna 1 (PARA) para cada linha i
  r.append((1/100) * D_LIN[i][3]) #pega o valor da coluna 3 (R%) para cada linha i - valores de resistência | se divide por 100 pois é dado em %
  x.append((1/100) * D_LIN[i][4]) #pega o valor da coluna 4 (X%) para cada linha i - valores de reatância
  z.append(complex(r[i], x[i])) #forma os valores de impedância a partir dos valores de r e x
  ysh_lin.append((1/(2*100)) * D_LIN[i][5]) #pega os valores da coluna 5 (Mvar) para cada linha i e forma o valor das susceptâncias shunt
                                              #modelo pi contém metade da impedância em cada ramo shunt
  a.append(D_LIN[i][6]) #pega o valor da coluna 6 (Tap) para cada linha i e forma o valor de tap dos transformadores

#%% Cálculo das admitâncias

ykm = [0 for j in range(nl)] #inicialização de valores nulos para as admitâncias longitudinais

for k in range(nl):
  if r[k] != 0 and x[k] != 0:
    ykm[k] = 1/complex(r[k], x[k]) #cálculo das admitâncias longitudinais
  
  else:
    if r[k] == 0 and x[k] != 0:
      ykm[k] = 1/complex(0, x[k]) #cálculo das admitâncias quando a resistência é nula
    
    else:
      if x[k] == 0 and r[k] != 0:
        ykm[k] = 1/complex(r[k], 0) #cálculo das admitâncias quando a reatância é nula
      
      else:
        if r[k] == 0 and x[k] == 0:
          ykm[k] = complex(0, 0) #cálculo das admitâncias quando ambas resistências e reatâncias são nulas

#%% Determinação da Y_barra

Y_barra = [[complex(0, 0) for j in range(nb)] for i in range(nb)] #inicialização da matriz com valores complexos nulos

for k in range(nb):
  Y_barra[k][k] += ysh_bar[k] #reatância da Y_barra devido à compensação de reativos

for k in range(nl):
  m = B_de[k] - 1 #criação de loop para barras DE
  n = B_para[k] - 1 #criação de loop para barras PARA

  Y_barra[m][m] += complex(0, ysh_lin[k]) #reatância da Y_barra devido à compensação de reativos
  Y_barra[m][m] += ykm[k]

  Y_barra[n][n] += complex(0, ysh_lin[k]) #reatância da Y_barra devido à compensação de reativos
  Y_barra[n][n] += ykm[k]

m = [] #lista para identificação de barra DE
n = [] #lista para identificação de barra PARA

for k in range(nl):
  m = B_de[k] - 1 #criação de loop para barras DE
  n = B_para[k] - 1 #criação de loop para barras PARA
  
  Y_barra[m][n] -= (1/(a[k] * a[k])) * ykm[k] #+ complex(0, ysh_lin[k]) #forma admitâncias série e susceptâncias shunt
  Y_barra[n][m] -= (1/(a[k] * a[k])) * ykm[k]

G_barra = np.real(Y_barra)
B_barra = np.imag(Y_barra)

print(np.round(np.real(Y_barra), 4))
print('\n')
print(np.round(np.imag(Y_barra), 4))

np.savetxt("G_barra.csv", np.round(G_barra, 4), delimiter=";", fmt='%.4f')
np.savetxt("B_barra.csv", np.round(B_barra, 4), delimiter=";", fmt='%.4f')
